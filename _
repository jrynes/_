
/**
 * Intercepts HTTP requests and modifies them based on user authentication tokens.
 *
 * This method ensures valid authentication tokens are attached to outgoing HTTP requests.
 * It handles scenarios where:
 * - Tokens are missing or expired.
 * - Additional checks are required for international users or specific endpoints.
 * - Tokens need to be retrieved or refreshed from various sources.
 *
 * @param {HttpRequest<any>} request - The outgoing HTTP request.
 * @param {HttpHandler} next - The next handler in the HTTP pipeline.
 * @returns {Observable<HttpEvent<any>>} - The observable that handles the request and emits its events.
 *
 * Key Steps:
 * 1. Validates and decodes the user token from `sessionStorage` or `pcchannel`.
 * 2. Checks for token expiration and blocks requests if expired, except for specific whitelisted URLs.
 * 3. Adds Okta ID and access tokens to headers for authenticated requests.
 * 4. Handles special cases, such as enrollment endpoints, to set additional headers.
 * 5. Ensures the `Authorization` header is set appropriately for various scenarios.
 *
 * @example
 * // Usage in Angular's HTTP_INTERCEPTORS
 * {
 *   provide: HTTP_INTERCEPTORS,
 *   useClass: AuthInterceptor,
 *   multi: true
 * }
 *
 * @throws {Error} If the user token is expired and the request is not to a whitelisted URL.
 */
