/**
 * Determines whether a route can be activated by waiting for the application to finish initializing.
 *
 * This method subscribes to an observable from the `initializationService` that emits when the app is initialized.
 * If initialization is complete, it allows navigation. If initialization fails or times out, it redirects to `/401`.
 *
 * @returns {Observable<boolean>} An observable that emits `true` if the route can be activated, or `false` otherwise.
 *
 * Key Steps:
 * 1. Waits for the application to emit an "initialized" event.
 * 2. Ensures initialization completes naturally without polling or retries.
 * 3. Redirects to `/401` if initialization is not completed after a timeout.
 *
 * @example
 * canActivate(): Observable<boolean> {
 *   return this.canActivate();
 * }
 */
canActivate(): Observable<boolean> {
  return this.initializationService.isInitialized().pipe(
    // Wait until initialization emits `true`.
    filter((isInitialized) => isInitialized === true),
    take(1), // Complete the observable after the first `true` emission.
    map(() => true), // Allow navigation if initialization is complete.
    timeout(10000), // Optional: Add a timeout to prevent indefinite waiting.
    catchError((error) => {
      console.error('Initialization failed or timed out:', error);
      this.router.navigate(['/401']); // Redirect to unauthorized page.
      return of(false); // Prevent navigation.
    })
  );
}
